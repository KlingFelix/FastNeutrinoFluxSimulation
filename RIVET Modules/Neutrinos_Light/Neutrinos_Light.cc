#include "Rivet/Analysis.hh"
#include "Rivet/Projections/UnstableParticles.hh"
#include "Rivet/Projections/FinalState.hh"
#include <math.h>
#include <fstream>

namespace Rivet {
    
    class Neutrinos_Light : public Analysis {
        public:
        
        DEFAULT_RIVET_ANALYSIS_CTOR(Neutrinos_Light);
        
        //*****************************************************************
        
        void init() {
            
            srand (time(NULL));
            declare(UnstableParticles(), "UP");
            declare(FinalState(), "FS");
            
            _outfile = std::ofstream("test.txt", std::ofstream::out);
            
            book(_h_dSigma_F_dE_p12, 1, 1, 1);
            book(_h_dSigma_F_dE_m12, 1, 1, 2);
            book(_h_dSigma_F_dE_p14, 1, 1, 3);
            book(_h_dSigma_F_dE_m14, 1, 1, 4);
            book(_h_dSigma_F_dE_p16, 1, 1, 5);
            book(_h_dSigma_F_dE_m16, 1, 1, 6);
            book(_h_dSigma_F_dE_all, 1, 1, 7);
            
            book(_h_dSigma_S_dE_p12, 2, 1, 1);
            book(_h_dSigma_S_dE_m12, 2, 1, 2);
            book(_h_dSigma_S_dE_p14, 2, 1, 3);
            book(_h_dSigma_S_dE_m14, 2, 1, 4);
            book(_h_dSigma_S_dE_p16, 2, 1, 5);
            book(_h_dSigma_S_dE_m16, 2, 1, 6);
            book(_h_dSigma_S_dE_all, 2, 1, 7);
            
            book(_h_dSigma_deta_p12, 7, 1, 1);
            book(_h_dSigma_deta_m12, 7, 1, 2);
            book(_h_dSigma_deta_p14, 7, 1, 3);
            book(_h_dSigma_deta_m14, 7, 1, 4);
            book(_h_dSigma_deta_p16, 7, 1, 5);
            book(_h_dSigma_deta_m16, 7, 1, 6);
            book(_h_dSigma_deta_all, 7, 1, 7);
            
            // Beam pipe geometry and magnetic fields: the first vector constains the
            // z-position [m], and the second vector the apertures / fields
            _aper1.push_back({
                -1.05000e+01, 1.05000000e+01, 1.06000000e+01, 1.44000000e+01,
                1.45000000e+01, 1.87000000e+01, 1.88000000e+01, 1.89000000e+01,
                1.90000000e+01, 1.91000000e+01, 2.09000000e+01, 2.10000000e+01,
                2.11000000e+01, 2.12000000e+01, 2.13000000e+01, 2.15000000e+01,
                2.17000000e+01, 2.18000000e+01, 2.19000000e+01, 2.20000000e+01,
                2.21000000e+01, 2.22000000e+01, 2.23000000e+01, 2.24000000e+01,
                2.25000000e+01, 2.26000000e+01, 3.13000000e+01, 3.14000000e+01,
                3.17000000e+01, 4.51000000e+01, 4.52000000e+01, 4.53000000e+01,
                4.54000000e+01, 4.55000000e+01, 4.56000000e+01, 4.57000000e+01,
                4.58000000e+01, 4.59000000e+01, 4.60000000e+01, 4.61000000e+01,
                4.62000000e+01, 4.63000000e+01, 4.64000000e+01, 4.65000000e+01,
                5.48000000e+01, 5.49000000e+01, 5.50000000e+01, 5.77000000e+01,
                5.78000000e+01, 5.79000000e+01, 5.80000000e+01, 5.81000000e+01,
                5.82000000e+01, 5.85000000e+01, 5.86000000e+01, 5.87000000e+01,
                5.88000000e+01, 5.89000000e+01, 5.90000000e+01, 5.91000000e+01,
                5.92000000e+01, 5.93000000e+01, 5.94000000e+01, 5.95000000e+01,
                5.96000000e+01, 5.97000000e+01, 8.44000000e+01, 8.45000000e+01,
                8.46000000e+01, 8.47000000e+01, 1.39300000e+02, 1.41200000e+02,
                1.44800000e+02, 1.44900000e+02, 1.45000000e+02, 1.50530000e+02,
                1.50600000e+02, 1.50700000e+02, 1.50800000e+02, 1.50900000e+02,
                1.51000000e+02, 1.51100000e+02, 1.51300000e+02, 1.51400000e+02,
                1.51500000e+02, 1.51600000e+02, 1.51700000e+02, 1.51800000e+02,
                1.51900000e+02, 1.52000000e+02, 1.52100000e+02, 1.52200000e+02,
                1.52300000e+02, 1.52400000e+02, 1.52500000e+02, 1.52600000e+02,
                1.63299999e+02, 1.63399999e+02, 1.63499999e+02, 1.72199999e+02,
                1.72399999e+02, 1.72499999e+02, 1.92399999e+02, 1.92499999e+02,
                1.99499999e+02, 1.99599999e+02, 1.99999999e+02, 2.00099999e+02,
                2.24299999e+02, 2.24399999e+02, 2.31399999e+02, 2.31499999e+02,
                2.31899999e+02, 2.31999999e+02, 2.56499999e+02, 2.56599999e+02,
                2.58799999e+02, 2.58899999e+02, 2.58999999e+02, 2.59399999e+02,
                2.59499999e+02});
            _aper1.push_back({
                2.90000000e-02, 3.81667000e-02, 4.00000000e-02, 5.56757000e-02,
                6.00000000e-02, 5.46248000e-02, 4.38745000e-02, 3.31242000e-02,
                2.23750000e-02, 1.70000000e-02, 1.87858000e-02, 2.23571000e-02,
                2.59286000e-02, 2.95000000e-02, 3.00000000e-02, 2.98044000e-02,
                2.77455000e-02, 2.67160000e-02, 2.56866000e-02, 2.46572000e-02,
                2.36278000e-02, 2.25983000e-02, 2.15689000e-02, 2.05395000e-02,
                1.95100000e-02, 1.89500000e-02, 2.42409000e-02, 3.01000000e-02,
                2.40000000e-02, 2.53845000e-02, 2.78703000e-02, 3.03560000e-02,
                3.10282000e-02, 3.03873000e-02, 2.97463000e-02, 2.91053000e-02,
                2.84643000e-02, 2.78233000e-02, 2.71824000e-02, 2.65414000e-02,
                2.59005000e-02, 2.52595000e-02, 2.46185000e-02, 2.40000000e-02,
                2.49518000e-02, 2.75241000e-02, 2.88000000e-02, 3.00800000e-02,
                3.21817000e-02, 3.42835000e-02, 3.63851000e-02, 3.84868000e-02,
                4.00000000e-02, 4.08859000e-02, 4.29460000e-02, 4.50061000e-02,
                4.70662000e-02, 4.91263000e-02, 5.11863000e-02, 5.32464000e-02,
                5.53064000e-02, 5.73665000e-02, 5.94266000e-02, 6.14867000e-02,
                6.35468000e-02, 6.40000000e-02, 6.97931000e-02, 8.18621000e-02,
                9.39310000e-02, 1.06000000e-01, 4.00000000e-02, 2.60000000e-02,
                3.06668000e-02, 3.53336000e-02, 4.00000000e-02, 3.66992000e-02,
                3.54767000e-02, 3.42542000e-02, 3.30317000e-02, 3.18092000e-02,
                3.05868000e-02, 3.00000000e-02, 3.00841000e-02, 3.01854000e-02,
                3.02867000e-02, 3.03880000e-02, 3.04894000e-02, 3.05907000e-02,
                3.06920000e-02, 3.07933000e-02, 3.08946000e-02, 3.09959000e-02,
                3.10973000e-02, 3.11986000e-02, 3.12999000e-02, 3.13000000e-02,
                3.01587000e-02, 2.89599000e-02, 2.89000000e-02, 3.00000000e-02,
                3.50000000e-02, 4.00000000e-02, 2.49407000e-02, 2.25500000e-02,
                2.34961000e-02, 2.40000000e-02, 2.88000000e-02, 4.00000000e-02,
                2.07120000e-02, 1.76500000e-02, 2.17931000e-02, 2.40000000e-02,
                2.88000000e-02, 4.00000000e-02, 3.25519000e-02, 2.89000000e-02,
                2.72182000e-02, 2.46229000e-02, 2.40000000e-02, 2.29290000e-02,
                2.20000000e-02});
            
            _aper2.push_back({
                -1.05000e+01, 1.05000000e+01, 1.06000000e+01, 1.44000000e+01,
                1.45000000e+01, 1.87000000e+01, 1.88000000e+01, 1.89000000e+01,
                1.90000000e+01, 1.91000000e+01, 2.09000000e+01, 2.10000000e+01,
                2.11000000e+01, 2.12000000e+01, 2.13000000e+01, 2.15000000e+01,
                2.17000000e+01, 2.18000000e+01, 2.19000000e+01, 2.20000000e+01,
                2.21000000e+01, 2.22000000e+01, 2.23000000e+01, 2.24000000e+01,
                2.25000000e+01, 2.26000000e+01, 3.13000000e+01, 3.14000000e+01,
                3.17000000e+01, 4.51000000e+01, 4.52000000e+01, 4.53000000e+01,
                4.54000000e+01, 4.55000000e+01, 4.56000000e+01, 4.57000000e+01,
                4.58000000e+01, 4.59000000e+01, 4.60000000e+01, 4.61000000e+01,
                4.62000000e+01, 4.63000000e+01, 4.64000000e+01, 4.65000000e+01,
                5.48000000e+01, 5.49000000e+01, 5.50000000e+01, 5.77000000e+01,
                5.78000000e+01, 5.79000000e+01, 5.80000000e+01, 5.81000000e+01,
                5.82000000e+01, 5.85000000e+01, 5.86000000e+01, 5.87000000e+01,
                5.88000000e+01, 5.89000000e+01, 5.90000000e+01, 5.91000000e+01,
                5.92000000e+01, 5.93000000e+01, 5.94000000e+01, 5.95000000e+01,
                5.96000000e+01, 5.97000000e+01, 8.44000000e+01, 8.45000000e+01,
                8.46000000e+01, 8.47000000e+01, 1.39300000e+02, 1.41200000e+02,
                1.44800000e+02, 1.44900000e+02, 1.45000000e+02, 1.50530000e+02,
                1.50600000e+02, 1.50700000e+02, 1.50800000e+02, 1.50900000e+02,
                1.51000000e+02, 1.51100000e+02, 1.51300000e+02, 1.51400000e+02,
                1.51500000e+02, 1.51600000e+02, 1.51700000e+02, 1.51800000e+02,
                1.51900000e+02, 1.52000000e+02, 1.52100000e+02, 1.52200000e+02,
                1.52300000e+02, 1.52400000e+02, 1.52500000e+02, 1.52600000e+02,
                1.63299999e+02, 1.63399999e+02, 1.63499999e+02, 1.72199999e+02,
                1.72399999e+02, 1.72499999e+02, 1.92399999e+02, 1.92499999e+02,
                1.99499999e+02, 1.99599999e+02, 1.99999999e+02, 2.00099999e+02,
                2.24299999e+02, 2.24399999e+02, 2.31399999e+02, 2.31499999e+02,
                2.31899999e+02, 2.31999999e+02, 2.56499999e+02, 2.56599999e+02,
                2.59399999e+02, 2.59499999e+02});
            _aper2.push_back({
                2.90000000e-02, 3.81667000e-02, 4.00000000e-02, 5.56757000e-02,
                6.00000000e-02, 5.46248000e-02, 4.38745000e-02, 3.31242000e-02,
                2.23750000e-02, 1.70000000e-02, 1.87858000e-02, 2.23571000e-02,
                2.59286000e-02, 2.95000000e-02, 3.00000000e-02, 2.98911000e-02,
                2.87452000e-02, 2.81723000e-02, 2.75993000e-02, 2.70264000e-02,
                2.64535000e-02, 2.58805000e-02, 2.53076000e-02, 2.47346000e-02,
                2.41617000e-02, 2.38500000e-02, 2.68158000e-02, 3.01000000e-02,
                2.89000000e-02, 2.93678000e-02, 3.02075000e-02, 3.10473000e-02,
                3.12744000e-02, 3.10579000e-02, 3.08413000e-02, 3.06248000e-02,
                3.04082000e-02, 3.01917000e-02, 2.99751000e-02, 2.97586000e-02,
                2.95421000e-02, 2.93255000e-02, 2.91090000e-02, 2.89000000e-02,
                2.98518000e-02, 3.24241000e-02, 3.37000000e-02, 3.44200000e-02,
                3.56022000e-02, 3.67845000e-02, 3.79666000e-02, 3.91488000e-02,
                4.00000000e-02, 3.95017000e-02, 3.83429000e-02, 3.71841000e-02,
                3.60252000e-02, 3.48664000e-02, 3.37077000e-02, 3.25489000e-02,
                3.13901000e-02, 3.02313000e-02, 2.90725000e-02, 2.79137000e-02,
                2.67549000e-02, 2.65000000e-02, 3.74655000e-02, 6.03103000e-02,
                8.31552000e-02, 1.06000000e-01, 4.00000000e-02, 2.60000000e-02,
                3.06668000e-02, 3.53336000e-02, 4.00000000e-02, 3.66992000e-02,
                3.54767000e-02, 3.42542000e-02, 3.30317000e-02, 3.18092000e-02,
                3.05868000e-02, 3.00000000e-02, 2.97671000e-02, 2.94865000e-02,
                2.92060000e-02, 2.89254000e-02, 2.86448000e-02, 2.83643000e-02,
                2.80837000e-02, 2.78031000e-02, 2.75226000e-02, 2.72420000e-02,
                2.69614000e-02, 2.66809000e-02, 2.64003000e-02, 2.64000000e-02,
                2.52587000e-02, 2.40599000e-02, 2.40000000e-02, 3.00000000e-02,
                3.50000000e-02, 4.00000000e-02, 2.07120000e-02, 1.76500000e-02,
                2.17931000e-02, 2.40000000e-02, 2.88000000e-02, 4.00000000e-02,
                2.49407000e-02, 2.25500000e-02, 2.34961000e-02, 2.40000000e-02,
                2.88000000e-02, 4.00000000e-02, 2.92640000e-02, 2.40000000e-02,
                2.03319000e-02, 1.71500000e-02});
                
            _aper3.push_back({
                -1.05000e+01, 1.05000000e+01, 1.06000000e+01, 1.44000000e+01,
                1.45000000e+01, 1.87000000e+01, 1.88000000e+01, 1.89000000e+01,
                1.90000000e+01, 1.91000000e+01, 2.09000000e+01, 2.10000000e+01,
                2.11000000e+01, 2.12000000e+01, 2.13000000e+01, 2.15000000e+01,
                2.17000000e+01, 2.18000000e+01, 2.19000000e+01, 2.20000000e+01,
                2.21000000e+01, 2.22000000e+01, 2.23000000e+01, 2.24000000e+01,
                2.25000000e+01, 2.26000000e+01, 3.13000000e+01, 3.14000000e+01,
                3.17000000e+01, 4.51000000e+01, 4.52000000e+01, 4.53000000e+01,
                4.54000000e+01, 4.55000000e+01, 4.56000000e+01, 4.57000000e+01,
                4.58000000e+01, 4.59000000e+01, 4.60000000e+01, 4.61000000e+01,
                4.62000000e+01, 4.63000000e+01, 4.64000000e+01, 4.65000000e+01,
                5.48000000e+01, 5.49000000e+01, 5.50000000e+01, 5.77000000e+01,
                5.78000000e+01, 5.79000000e+01, 5.80000000e+01, 5.81000000e+01,
                5.82000000e+01, 5.85000000e+01, 5.86000000e+01, 5.87000000e+01,
                5.88000000e+01, 5.89000000e+01, 5.90000000e+01, 5.91000000e+01,
                5.92000000e+01, 5.93000000e+01, 5.94000000e+01, 5.95000000e+01,
                5.96000000e+01, 5.97000000e+01, 8.44000000e+01, 8.45000000e+01,
                8.46000000e+01, 8.47000000e+01, 1.39300000e+02, 1.41200000e+02,
                1.44800000e+02, 1.44900000e+02, 1.45000000e+02, 1.50530000e+02,
                1.50600000e+02, 1.50700000e+02, 1.50800000e+02, 1.50900000e+02,
                1.51000000e+02, 1.51100000e+02, 1.51300000e+02, 1.51400000e+02,
                1.51500000e+02, 1.51600000e+02, 1.51700000e+02, 1.51800000e+02,
                1.51900000e+02, 1.52000000e+02, 1.52100000e+02, 1.52200000e+02,
                1.52300000e+02, 1.52400000e+02, 1.52500000e+02, 1.52600000e+02,
                1.63299999e+02, 1.63399999e+02, 1.63499999e+02, 1.72199999e+02,
                1.72399999e+02, 1.72499999e+02, 1.92399999e+02, 1.92499999e+02,
                1.99499999e+02, 1.99599999e+02, 1.99999999e+02, 2.00099999e+02,
                2.24299999e+02, 2.24399999e+02, 2.31399999e+02, 2.31499999e+02,
                2.31899999e+02, 2.31999999e+02, 2.56499999e+02, 2.56599999e+02,
                2.58799999e+02, 2.58899999e+02, 2.58999999e+02, 2.59399999e+02,
                2.59499999e+02});
            _aper3.push_back({
                2.90000000e-02, 3.81667000e-02, 4.00000000e-02, 5.56757000e-02,
                6.00000000e-02, 5.46248000e-02, 4.38745000e-02, 3.31242000e-02,
                2.23750000e-02, 1.70000000e-02, 1.87858000e-02, 2.23571000e-02,
                2.59286000e-02, 2.95000000e-02, 3.00000000e-02, 2.98911000e-02,
                2.87452000e-02, 2.81723000e-02, 2.75993000e-02, 2.70264000e-02,
                2.64535000e-02, 2.58805000e-02, 2.53076000e-02, 2.47346000e-02,
                2.41617000e-02, 2.38500000e-02, 2.68158000e-02, 3.01000000e-02,
                2.89000000e-02, 2.93678000e-02, 3.02075000e-02, 3.10473000e-02,
                3.12744000e-02, 3.10579000e-02, 3.08413000e-02, 3.06248000e-02,
                3.04082000e-02, 3.01917000e-02, 2.99751000e-02, 2.97586000e-02,
                2.95421000e-02, 2.93255000e-02, 2.91090000e-02, 2.89000000e-02,
                2.98518000e-02, 3.24241000e-02, 3.37000000e-02, 3.44200000e-02,
                3.56022000e-02, 3.67845000e-02, 3.79666000e-02, 3.91488000e-02,
                4.00000000e-02, 4.08859000e-02, 4.29460000e-02, 4.50061000e-02,
                4.70662000e-02, 4.91263000e-02, 5.11863000e-02, 5.32464000e-02,
                5.53064000e-02, 5.73665000e-02, 5.94266000e-02, 6.14867000e-02,
                6.35468000e-02, 6.40000000e-02, 6.97931000e-02, 8.18621000e-02,
                9.39310000e-02, 1.06000000e-01, 4.00000000e-02, 2.60000000e-02,
                3.06668000e-02, 3.53336000e-02, 4.00000000e-02, 3.66992000e-02,
                3.54767000e-02, 3.42542000e-02, 3.30317000e-02, 3.18092000e-02,
                3.05868000e-02, 3.00000000e-02, 3.00841000e-02, 3.01854000e-02,
                3.02867000e-02, 3.03880000e-02, 3.04894000e-02, 3.05907000e-02,
                3.06920000e-02, 3.07933000e-02, 3.08946000e-02, 3.09959000e-02,
                3.10973000e-02, 3.11986000e-02, 3.12999000e-02, 3.13000000e-02,
                3.01587000e-02, 2.89599000e-02, 2.89000000e-02, 3.00000000e-02,
                3.50000000e-02, 4.00000000e-02, 2.49407000e-02, 2.25500000e-02,
                2.34961000e-02, 2.40000000e-02, 2.88000000e-02, 4.00000000e-02,
                2.49407000e-02, 2.25500000e-02, 2.34961000e-02, 2.40000000e-02,
                2.88000000e-02, 4.00000000e-02, 3.25519000e-02, 2.89000000e-02,
                2.72182000e-02, 2.46229000e-02, 2.40000000e-02, 2.29290000e-02,
                2.20000000e-02});
                
            _aper4.push_back({
                -1.05000e+01, 0.00000000e+00, 1.05000000e+01, 1.06000000e+01, 1.44000000e+01,
                1.45000000e+01, 1.87000000e+01, 1.88000000e+01, 1.89000000e+01,
                1.90000000e+01, 1.91000000e+01, 2.09000000e+01, 2.10000000e+01,
                2.11000000e+01, 2.12000000e+01, 2.13000000e+01, 2.15000000e+01,
                2.17000000e+01, 2.18000000e+01, 2.19000000e+01, 2.20000000e+01,
                2.21000000e+01, 2.22000000e+01, 2.23000000e+01, 2.24000000e+01,
                2.25000000e+01, 2.26000000e+01, 3.13000000e+01, 3.14000000e+01,
                3.17000000e+01, 4.51000000e+01, 4.52000000e+01, 4.53000000e+01,
                4.54000000e+01, 4.55000000e+01, 4.56000000e+01, 4.57000000e+01,
                4.58000000e+01, 4.59000000e+01, 4.60000000e+01, 4.61000000e+01,
                4.62000000e+01, 4.63000000e+01, 4.64000000e+01, 4.65000000e+01,
                5.48000000e+01, 5.49000000e+01, 5.50000000e+01, 5.77000000e+01,
                5.78000000e+01, 5.79000000e+01, 5.80000000e+01, 5.81000000e+01,
                5.82000000e+01, 5.85000000e+01, 5.86000000e+01, 5.87000000e+01,
                5.88000000e+01, 5.89000000e+01, 5.90000000e+01, 5.91000000e+01,
                5.92000000e+01, 5.93000000e+01, 5.94000000e+01, 5.95000000e+01,
                5.96000000e+01, 5.97000000e+01, 8.44000000e+01, 8.45000000e+01,
                8.46000000e+01, 8.47000000e+01, 1.39300000e+02, 1.41200000e+02,
                1.44800000e+02, 1.44900000e+02, 1.45000000e+02, 1.50530000e+02,
                1.50600000e+02, 1.50700000e+02, 1.50800000e+02, 1.50900000e+02,
                1.51000000e+02, 1.51100000e+02, 1.51300000e+02, 1.51400000e+02,
                1.51500000e+02, 1.51600000e+02, 1.51700000e+02, 1.51800000e+02,
                1.51900000e+02, 1.52000000e+02, 1.52100000e+02, 1.52200000e+02,
                1.52300000e+02, 1.52400000e+02, 1.52500000e+02, 1.52600000e+02,
                1.63299999e+02, 1.63399999e+02, 1.63499999e+02, 1.72199999e+02,
                1.72399999e+02, 1.72499999e+02, 1.92399999e+02, 1.92499999e+02,
                1.99499999e+02, 1.99599999e+02, 1.99999999e+02, 2.00099999e+02,
                2.24299999e+02, 2.24399999e+02, 2.31399999e+02, 2.31499999e+02,
                2.31899999e+02, 2.31999999e+02, 2.56499999e+02, 2.56599999e+02,
                2.58799999e+02, 2.58899999e+02, 2.58999999e+02, 2.59399999e+02,
                2.59499999e+02});
            _aper4.push_back({
                2.90000000e-02, 3.81667000e-02, 4.00000000e-02, 5.56757000e-02,
                6.00000000e-02, 5.46248000e-02, 4.38745000e-02, 3.31242000e-02,
                2.23750000e-02, 1.70000000e-02, 1.87858000e-02, 2.23571000e-02,
                2.59286000e-02, 2.95000000e-02, 3.00000000e-02, 2.98911000e-02,
                2.87452000e-02, 2.81723000e-02, 2.75993000e-02, 2.70264000e-02,
                2.64535000e-02, 2.58805000e-02, 2.53076000e-02, 2.47346000e-02,
                2.41617000e-02, 2.38500000e-02, 2.68158000e-02, 3.01000000e-02,
                2.89000000e-02, 2.93678000e-02, 3.02075000e-02, 3.10473000e-02,
                3.12744000e-02, 3.10579000e-02, 3.08413000e-02, 3.06248000e-02,
                3.04082000e-02, 3.01917000e-02, 2.99751000e-02, 2.97586000e-02,
                2.95421000e-02, 2.93255000e-02, 2.91090000e-02, 2.89000000e-02,
                2.98518000e-02, 3.24241000e-02, 3.37000000e-02, 3.44200000e-02,
                3.56022000e-02, 3.67845000e-02, 3.79666000e-02, 3.91488000e-02,
                4.00000000e-02, 3.95017000e-02, 3.83429000e-02, 3.71841000e-02,
                3.60252000e-02, 3.48664000e-02, 3.37077000e-02, 3.25489000e-02,
                3.13901000e-02, 3.02313000e-02, 2.90725000e-02, 2.79137000e-02,
                2.67549000e-02, 2.65000000e-02, 3.74655000e-02, 6.03103000e-02,
                8.31552000e-02, 1.06000000e-01, 4.00000000e-02, 2.60000000e-02,
                3.06668000e-02, 3.53336000e-02, 4.00000000e-02, 3.66992000e-02,
                3.54767000e-02, 3.42542000e-02, 3.30317000e-02, 3.18092000e-02,
                3.05868000e-02, 3.00000000e-02, 3.00841000e-02, 3.01854000e-02,
                3.02867000e-02, 3.03880000e-02, 3.04894000e-02, 3.05907000e-02,
                3.06920000e-02, 3.07933000e-02, 3.08946000e-02, 3.09959000e-02,
                3.10973000e-02, 3.11986000e-02, 3.12999000e-02, 3.13000000e-02,
                3.01587000e-02, 2.89599000e-02, 2.89000000e-02, 3.00000000e-02,
                3.50000000e-02, 4.00000000e-02, 2.49407000e-02, 2.25500000e-02,
                2.34961000e-02, 2.40000000e-02, 2.88000000e-02, 4.00000000e-02,
                2.49407000e-02, 2.25500000e-02, 2.34961000e-02, 2.40000000e-02,
                2.88000000e-02, 4.00000000e-02, 3.25519000e-02, 2.89000000e-02,
                2.72182000e-02, 2.46229000e-02, 2.40000000e-02, 2.29290000e-02,
                2.20000000e-02});
            
            _bfield.push_back({
                -1.05000e+01,  5.96220000e+01,  5.97000000e+01,
                6.30220000e+01,  6.38880000e+01,  6.72880000e+01,
                6.81540000e+01,  7.15540000e+01,  7.24200000e+01,
                7.58200000e+01,  7.66860000e+01,  8.00860000e+01,
                8.09520000e+01,  8.43520000e+01,  1.53175000e+02,
                1.62624999e+02,  2.69584247e+02,  1.00000000e+03});
            _bfield.push_back({
                0.00000000e+00, -3.59700000e-01, -3.59700000e-01,
                0.00000000e+00, -3.59700000e-01,  0.00000000e+00,
                -3.59700000e-01,  0.00000000e+00, -3.59700000e-01,
                0.00000000e+00, -3.59700000e-01,  0.00000000e+00,
                -3.59700000e-01,  0.00000000e+00,  7.76594368e-01,
                0.00000000e+00,  2.31817640e+00,  0.00000000e+00});
            
             _bprime.push_back({
                 -10.5      ,   22.965     ,   29.335     ,   32.05      ,
                 37.55      ,   38.55      ,   44.05      ,   46.965     ,
                 53.335     ,  167.852999  ,  171.252999  ,  194.089999  ,
                 198.889999 ,  225.989999  ,  230.789999  ,  260.003999  ,
                 263.403999 ,  263.770999  ,  267.170999  , 1000.        });
             _bprime.push_back({
                 0.        ,  188.61234997,    0.        , -191.0581497 ,
                 0.        , -191.0581497 ,    0.        ,  189.95178475,
                 0.        ,  -52.33156265,    0.        ,   26.63078054,
                 0.        ,   -6.994     ,    0.        ,  160.33631742,
                 0.        ,  160.33631742,    0.        ,    0.        });
            
            _kickers.push_back({
                2.984000e+01,  3.802000e+01, 5.381000e+01, 1.639900e+02,
                1.652900e+02,  1.930000e+02, 2.249000e+02});
            _kickers.push_back({
                -4.400000e-06, -4.400000e-06, -4.400000e-06, 0.000000e+00,
                -1.287952e-05,  6.739250e-06,  0.000000e+00});
            
            _kickers.push_back({
                -6.000000e-06, -6.000000e-06, -6.000000e-06,  2.632554e-05,
                0.000000e+00,  0.000000e+00,  1.442912e-05});
            
            // masses of hadrons
            _mass[211]=0.13957;
            _mass[321]=0.49368;
            _mass[310]=0.49761;
            _mass[130]=0.49761;
            _mass[3122]=1.11568;
            _mass[3222]=1.18937;
            _mass[3112]=1.19745;
            _mass[3322]=1.31486;
            _mass[3312]=1.32171;
            _mass[3334]=1.67245;
            
            //lifetime of hadron
            _ctau[211]=3e+08* 2.603e-08;
            _ctau[321]=3e+08* 1.238e-08;
            _ctau[310]=3e+08* 8.954e-11;
            _ctau[130]=3e+08* 5.116e-08;
            _ctau[3122]=3e+08* 2.60e-10;
            _ctau[3222]=3e+08* 8.018e-11;
            _ctau[3112]=3e+08* 1.479e-10;
            _ctau[3322]=3e+08* 2.90e-10;
            _ctau[3312]=3e+08* 1.639e-10;
            _ctau[3334]=3e+08* 8.21e-11;
            
            // Energy distribution of neutrinos in the hadron decay rest frame. the first vector
            // constains the energy [GeV], and the second vector the CDF.
            _energy_cdf[130][12].push_back({
                7.56709586e-03, 1.65592869e-02, 2.55514779e-02, 3.45436689e-02,
                4.35358599e-02, 5.25280509e-02, 6.15202419e-02, 7.05124329e-02,
                7.95046239e-02, 8.84968149e-02, 9.74890059e-02, 1.06481197e-01,
                1.15473388e-01, 1.24465579e-01, 1.33457770e-01, 1.42449961e-01,
                1.51442152e-01, 1.60434343e-01, 1.69426534e-01, 1.78418725e-01,
                1.87410916e-01, 1.96403107e-01, 2.05395298e-01, 2.14387489e-01,
                2.23379680e-01});
            _energy_cdf[130][12].push_back({
                6.70000000e-04, 3.11000000e-03, 9.13000000e-03, 1.99500000e-02,
                3.61800000e-02, 5.73600000e-02, 8.50200000e-02, 1.19960000e-01,
                1.62680000e-01, 2.11210000e-01, 2.65680000e-01, 3.25470000e-01,
                3.90370000e-01, 4.60200000e-01, 5.31210000e-01, 6.03140000e-01,
                6.73110000e-01, 7.42650000e-01, 8.06360000e-01, 8.64650000e-01,
                9.13360000e-01, 9.53230000e-01, 9.81110000e-01, 9.96340000e-01,
                1.00000000e+00});
            _energy_cdf[130][14].push_back({
                6.74672529e-03, 1.41580181e-02, 2.15693109e-02, 2.89806037e-02,
                3.63918965e-02, 4.38031894e-02, 5.12144822e-02, 5.86257750e-02,
                6.60370678e-02, 7.34483606e-02, 8.08596534e-02, 8.82709462e-02,
                9.56822391e-02, 1.03093532e-01, 1.10504825e-01, 1.17916118e-01,
                1.25327410e-01, 1.32738703e-01, 1.40149996e-01, 1.47561289e-01,
                1.54972582e-01, 1.62383874e-01, 1.69795167e-01, 1.77206460e-01,
                1.84617753e-01});
            _energy_cdf[130][14].push_back({
                6.80000000e-04, 3.03000000e-03, 7.87000000e-03, 1.65300000e-02,
                3.06400000e-02, 4.95900000e-02, 7.34000000e-02, 1.02610000e-01,
                1.37290000e-01, 1.78820000e-01, 2.25100000e-01, 2.77190000e-01,
                3.34050000e-01, 3.95020000e-01, 4.59540000e-01, 5.26660000e-01,
                5.94170000e-01, 6.62400000e-01, 7.28510000e-01, 7.91530000e-01,
                8.50980000e-01, 9.04530000e-01, 9.47870000e-01, 9.82130000e-01,
                1.00000000e+00});
                
            _energy_cdf[310][12].push_back({
                7.56709586e-03, 1.65592869e-02, 2.55514779e-02, 3.45436689e-02,
                4.35358599e-02, 5.25280509e-02, 6.15202419e-02, 7.05124329e-02,
                7.95046239e-02, 8.84968149e-02, 9.74890059e-02, 1.06481197e-01,
                1.15473388e-01, 1.24465579e-01, 1.33457770e-01, 1.42449961e-01,
                1.51442152e-01, 1.60434343e-01, 1.69426534e-01, 1.78418725e-01,
                1.87410916e-01, 1.96403107e-01, 2.05395298e-01, 2.14387489e-01,
                2.23379680e-01});
            _energy_cdf[310][12].push_back({
                6.70000000e-04, 3.11000000e-03, 9.13000000e-03, 1.99500000e-02,
                3.61800000e-02, 5.73600000e-02, 8.50200000e-02, 1.19960000e-01,
                1.62680000e-01, 2.11210000e-01, 2.65680000e-01, 3.25470000e-01,
                3.90370000e-01, 4.60200000e-01, 5.31210000e-01, 6.03140000e-01,
                6.73110000e-01, 7.42650000e-01, 8.06360000e-01, 8.64650000e-01,
                9.13360000e-01, 9.53230000e-01, 9.81110000e-01, 9.96340000e-01,
                1.00000000e+00});
            _energy_cdf[310][14].push_back({
                6.74672529e-03, 1.41580181e-02, 2.15693109e-02, 2.89806037e-02,
                3.63918965e-02, 4.38031894e-02, 5.12144822e-02, 5.86257750e-02,
                6.60370678e-02, 7.34483606e-02, 8.08596534e-02, 8.82709462e-02,
                9.56822391e-02, 1.03093532e-01, 1.10504825e-01, 1.17916118e-01,
                1.25327410e-01, 1.32738703e-01, 1.40149996e-01, 1.47561289e-01,
                1.54972582e-01, 1.62383874e-01, 1.69795167e-01, 1.77206460e-01,
                1.84617753e-01});
            _energy_cdf[310][14].push_back({
                6.80000000e-04, 3.03000000e-03, 7.87000000e-03, 1.65300000e-02,
                3.06400000e-02, 4.95900000e-02, 7.34000000e-02, 1.02610000e-01,
                1.37290000e-01, 1.78820000e-01, 2.25100000e-01, 2.77190000e-01,
                3.34050000e-01, 3.95020000e-01, 4.59540000e-01, 5.26660000e-01,
                5.94170000e-01, 6.62400000e-01, 7.28510000e-01, 7.91530000e-01,
                8.50980000e-01, 9.04530000e-01, 9.47870000e-01, 9.82130000e-01,
                1.00000000e+00});
                
            _energy_cdf[211][12].push_back({0.06902, 0.06974, 0.06978, 0.06982, 0.06986});
            _energy_cdf[211][12].push_back({0.     , 0.     , 1.     , 1.     , 1.     });
            _energy_cdf[211][14].push_back({0.02808, 0.02968, 0.02984, 0.03   , 0.03016});
            _energy_cdf[211][14].push_back({0.     , 0.     , 1.     , 1.     , 1.     });
                
            _energy_cdf[3112][12].push_back({
                7.05885481e-03, 1.60798225e-02, 2.51007901e-02, 3.41217578e-02,
                4.31427255e-02, 5.21636931e-02, 6.11846608e-02, 7.02056284e-02,
                7.92265961e-02, 8.82475638e-02, 9.72685314e-02, 1.06289499e-01,
                1.15310467e-01, 1.24331434e-01, 1.33352402e-01, 1.42373370e-01,
                1.51394337e-01, 1.60415305e-01, 1.69436273e-01, 1.78457240e-01,
                1.87478208e-01, 1.96499176e-01, 2.05520143e-01, 2.14541111e-01,
                2.23562079e-01});
            _energy_cdf[3112][12].push_back({
                9.60000000e-04, 5.45000000e-03, 1.43800000e-02, 3.03200000e-02,
                5.28300000e-02, 8.41600000e-02, 1.24920000e-01, 1.73260000e-01,
                2.29030000e-01, 2.90790000e-01, 3.57060000e-01, 4.27800000e-01,
                4.99760000e-01, 5.73600000e-01, 6.44520000e-01, 7.13520000e-01,
                7.78110000e-01, 8.35160000e-01, 8.85120000e-01, 9.26450000e-01,
                9.58150000e-01, 9.79910000e-01, 9.93020000e-01, 9.98640000e-01,
                1.00000000e+00});
            _energy_cdf[3112][14].push_back({
                4.06127508e-03, 9.71210294e-03, 1.53629308e-02, 2.10137587e-02,
                2.66645865e-02, 3.23154144e-02, 3.79662422e-02, 4.36170701e-02,
                4.92678980e-02, 5.49187258e-02, 6.05695537e-02, 6.62203815e-02,
                7.18712094e-02, 7.75220373e-02, 8.31728651e-02, 8.88236930e-02,
                9.44745208e-02, 1.00125349e-01, 1.05776177e-01, 1.11427004e-01,
                1.17077832e-01, 1.22728660e-01, 1.28379488e-01, 1.34030316e-01,
                1.39681144e-01});
            _energy_cdf[3112][14].push_back({
                4.30000000e-04, 2.45000000e-03, 6.94000000e-03, 1.52600000e-02,
                2.78400000e-02, 4.55100000e-02, 6.81900000e-02, 9.71400000e-02,
                1.32770000e-01, 1.73630000e-01, 2.19550000e-01, 2.69950000e-01,
                3.25390000e-01, 3.84270000e-01, 4.47400000e-01, 5.12530000e-01,
                5.80150000e-01, 6.45650000e-01, 7.12970000e-01, 7.76420000e-01,
                8.36140000e-01, 8.92760000e-01, 9.39830000e-01, 9.77930000e-01,
                1.00000000e+00});
                
            _energy_cdf[3122][12].push_back({
                4.16464955e-03, 1.06216611e-02, 1.70786726e-02, 2.35356841e-02,
                2.99926957e-02, 3.64497072e-02, 4.29067187e-02, 4.93637302e-02,
                5.58207418e-02, 6.22777533e-02, 6.87347648e-02, 7.51917764e-02,
                8.16487879e-02, 8.81057994e-02, 9.45628109e-02, 1.01019822e-01,
                1.07476834e-01, 1.13933846e-01, 1.20390857e-01, 1.26847869e-01,
                1.33304880e-01, 1.39761892e-01, 1.46218903e-01, 1.52675915e-01,
                1.59132926e-01});
            _energy_cdf[3122][12].push_back({
                8.00000000e-04, 4.63000000e-03, 1.40400000e-02, 3.00200000e-02,
                5.54700000e-02, 8.69900000e-02, 1.28480000e-01, 1.77270000e-01,
                2.33940000e-01, 2.97990000e-01, 3.65860000e-01, 4.38040000e-01,
                5.11520000e-01, 5.85900000e-01, 6.57960000e-01, 7.25940000e-01,
                7.87650000e-01, 8.43450000e-01, 8.90830000e-01, 9.29850000e-01,
                9.59970000e-01, 9.81260000e-01, 9.93230000e-01, 9.99060000e-01,
                1.00000000e+00});
            _energy_cdf[3122][14].push_back({
                2.30650351e-03, 5.04623569e-03, 7.78596787e-03, 1.05257001e-02,
                1.32654322e-02, 1.60051644e-02, 1.87448966e-02, 2.14846288e-02,
                2.42243610e-02, 2.69640931e-02, 2.97038253e-02, 3.24435575e-02,
                3.51832897e-02, 3.79230219e-02, 4.06627541e-02, 4.34024862e-02,
                4.61422184e-02, 4.88819506e-02, 5.16216828e-02, 5.43614150e-02,
                5.71011471e-02, 5.98408793e-02, 6.25806115e-02, 6.53203437e-02,
                6.80600759e-02});
            _energy_cdf[3122][14].push_back({
                5.00000000e-04, 2.23000000e-03, 6.36000000e-03, 1.36100000e-02,
                2.40300000e-02, 3.91500000e-02, 5.90300000e-02, 8.46700000e-02,
                1.14650000e-01, 1.51720000e-01, 1.93350000e-01, 2.39750000e-01,
                2.91240000e-01, 3.47410000e-01, 4.07390000e-01, 4.71650000e-01,
                5.38090000e-01, 6.05310000e-01, 6.75930000e-01, 7.43480000e-01,
                8.09920000e-01, 8.71780000e-01, 9.27530000e-01, 9.72790000e-01,
                1.00000000e+00});
                
            _energy_cdf[321][12].push_back({
                7.20755003e-03, 1.69884556e-02, 2.67693611e-02, 3.65502666e-02,
                4.63311722e-02, 5.61120777e-02, 6.58929832e-02, 7.56738887e-02,
                8.54547943e-02, 9.52356998e-02, 1.05016605e-01, 1.14797511e-01,
                1.24578416e-01, 1.34359322e-01, 1.44140227e-01, 1.53921133e-01,
                1.63702039e-01, 1.73482944e-01, 1.83263850e-01, 1.93044755e-01,
                2.02825661e-01, 2.12606566e-01, 2.22387472e-01, 2.32168377e-01,
                2.41949283e-01});
            _energy_cdf[321][12].push_back({
                7.60000000e-04, 3.78000000e-03, 1.09200000e-02, 2.41600000e-02,
                4.43500000e-02, 7.12100000e-02, 1.05630000e-01, 1.49100000e-01,
                1.99590000e-01, 2.57210000e-01, 3.21050000e-01, 3.91550000e-01,
                4.64900000e-01, 5.41530000e-01, 6.19750000e-01, 6.95500000e-01,
                7.69850000e-01, 8.37860000e-01, 8.95960000e-01, 9.43140000e-01,
                9.76900000e-01, 9.95090000e-01, 9.99670000e-01, 9.99680000e-01,
                1.00000000e+00});
            _energy_cdf[321][14].push_back({
                9.80326769e-03, 1.90167280e-02, 2.82301882e-02, 3.74436485e-02,
                4.66571088e-02, 5.58705691e-02, 6.50840293e-02, 7.42974896e-02,
                8.35109499e-02, 9.27244102e-02, 1.01937870e-01, 1.11151331e-01,
                1.20364791e-01, 1.29578251e-01, 1.38791712e-01, 1.48005172e-01,
                1.57218632e-01, 1.66432092e-01, 1.75645553e-01, 1.84859013e-01,
                1.94072473e-01, 2.03285934e-01, 2.12499394e-01, 2.21712854e-01,
                2.30926314e-01});
            _energy_cdf[321][14].push_back({
                1.00000000e-04, 3.50000000e-04, 8.90000000e-04, 1.68000000e-03,
                2.77000000e-03, 4.50000000e-03, 6.65000000e-03, 9.38000000e-03,
                1.25800000e-02, 1.59600000e-02, 1.95300000e-02, 2.36000000e-02,
                2.78600000e-02, 3.22300000e-02, 3.64500000e-02, 4.00400000e-02,
                4.36400000e-02, 4.67100000e-02, 4.88100000e-02, 4.96700000e-02,
                4.96700000e-02, 4.96700000e-02, 4.96700000e-02, 4.96700000e-02,
                1.00000000e+00});
                
            _energy_cdf[3222][12].push_back({
                0.00228427, 0.00506636, 0.00784844, 0.01063052, 0.01341261,
                0.01619469, 0.01897677, 0.02175886, 0.02454094, 0.02732302,
                0.03010511, 0.03288719, 0.03566927, 0.03845135, 0.04123344,
                0.04401552, 0.0467976 , 0.04957969, 0.05236177, 0.05514385,
                0.05792594, 0.06070802, 0.0634901 , 0.06627219, 0.06905427});
            _energy_cdf[3222][12].push_back({
                0.00134   , 0.00589   , 0.0164    , 0.03398   , 0.06054   ,
                0.09583   , 0.13918   , 0.18966   , 0.24895   , 0.31348   ,
                0.38261   , 0.45464   , 0.52865   , 0.60112   , 0.67048   ,
                0.73618   , 0.79676   , 0.85095   , 0.89655   , 0.9344    ,
                0.96156   , 0.98154   , 0.99321   , 0.99849   , 1.        });
                
            _energy_cdf[3312][12].push_back({
                0.00568061, 0.01313762, 0.02059462, 0.02805163, 0.03550863,
                0.04296564, 0.05042264, 0.05787965, 0.06533665, 0.07279365,
                0.08025066, 0.08770766, 0.09516467, 0.10262167, 0.11007868,
                0.11753568, 0.12499268, 0.13244969, 0.13990669, 0.1473637 ,
                0.1548207 , 0.16227771, 0.16973471, 0.17719172, 0.18464872});
            _energy_cdf[3312][12].push_back({
                0.00107   , 0.00525   , 0.01518   , 0.03159   , 0.05565   ,
                0.08805   , 0.12953   , 0.17915   , 0.23555   , 0.29873   ,
                0.36612   , 0.43752   , 0.51081   , 0.58541   , 0.65769   ,
                0.72488   , 0.7864    , 0.8411    , 0.88983   , 0.92925   ,
                0.95975   , 0.98009   , 0.99292   , 0.99872   , 1.        });
            _energy_cdf[3312][14].push_back({
                2.91161719e-03, 6.73347081e-03, 1.05553244e-02, 1.43771781e-02,
                1.81990317e-02, 2.20208853e-02, 2.58427390e-02, 2.96645926e-02,
                3.34864462e-02, 3.73082998e-02, 4.11301535e-02, 4.49520071e-02,
                4.87738607e-02, 5.25957143e-02, 5.64175680e-02, 6.02394216e-02,
                6.40612752e-02, 6.78831289e-02, 7.17049825e-02, 7.55268361e-02,
                7.93486897e-02, 8.31705434e-02, 8.69923970e-02, 9.08142506e-02,
                9.46361043e-02});
            _energy_cdf[3312][14].push_back({
                4.00000000e-04, 2.39000000e-03, 7.07000000e-03, 1.47500000e-02,
                2.70400000e-02, 4.31500000e-02, 6.37700000e-02, 9.01000000e-02,
                1.21390000e-01, 1.58970000e-01, 2.02580000e-01, 2.50730000e-01,
                3.04170000e-01, 3.61950000e-01, 4.23540000e-01, 4.87340000e-01,
                5.53560000e-01, 6.20480000e-01, 6.87520000e-01, 7.54580000e-01,
                8.19520000e-01, 8.79420000e-01, 9.32630000e-01, 9.75670000e-01,
                1.00000000e+00});
                
            _energy_cdf[3322][12].push_back({
                3.73372744e-03, 8.41343614e-03, 1.30931448e-02, 1.77728536e-02,
                2.24525623e-02, 2.71322710e-02, 3.18119797e-02, 3.64916884e-02,
                4.11713971e-02, 4.58511058e-02, 5.05308145e-02, 5.52105232e-02,
                5.98902319e-02, 6.45699406e-02, 6.92496493e-02, 7.39293580e-02,
                7.86090667e-02, 8.32887754e-02, 8.79684841e-02, 9.26481928e-02,
                9.73279015e-02, 1.02007610e-01, 1.06687319e-01, 1.11367028e-01,
                1.16046736e-01});
            _energy_cdf[3322][12].push_back({
                9.10000000e-04, 5.27000000e-03, 1.54300000e-02, 3.28900000e-02,
                5.88000000e-02, 9.33900000e-02, 1.36130000e-01, 1.87690000e-01,
                2.45470000e-01, 3.09420000e-01, 3.76840000e-01, 4.49220000e-01,
                5.22390000e-01, 5.95160000e-01, 6.67540000e-01, 7.34160000e-01,
                7.95860000e-01, 8.49830000e-01, 8.96730000e-01, 9.34270000e-01,
                9.62730000e-01, 9.82090000e-01, 9.93630000e-01, 9.98910000e-01,
                1.00000000e+00});
            _energy_cdf[3322][14].push_back({
                6.95435752e-04, 1.47018743e-03, 2.24493911e-03, 3.01969080e-03,
                3.79444248e-03, 4.56919416e-03, 5.34394584e-03, 6.11869752e-03,
                6.89344920e-03, 7.66820088e-03, 8.44295256e-03, 9.21770424e-03,
                9.99245593e-03, 1.07672076e-02, 1.15419593e-02, 1.23167110e-02,
                1.30914627e-02, 1.38662143e-02, 1.46409660e-02, 1.54157177e-02,
                1.61904694e-02, 1.69652211e-02, 1.77399727e-02, 1.85147244e-02,
                1.92894761e-02});
            _energy_cdf[3322][14].push_back({
                3.60000000e-04, 2.09000000e-03, 5.81000000e-03, 1.22300000e-02,
                2.15800000e-02, 3.45900000e-02, 5.27500000e-02, 7.49400000e-02,
                1.02110000e-01, 1.34120000e-01, 1.71640000e-01, 2.14100000e-01,
                2.62180000e-01, 3.15690000e-01, 3.75100000e-01, 4.37400000e-01,
                5.03210000e-01, 5.71270000e-01, 6.43770000e-01, 7.15450000e-01,
                7.85210000e-01, 8.54730000e-01, 9.17510000e-01, 9.68400000e-01,
                1.00000000e+00});
            
            // Decay branching fractions {ve, vm, vebar, vmbar}
            _decay_branchings[211]  = {0.0001230,0.9998770,0,0};
            _decay_branchings[-211] = {0,0,0.0001230,0.9998770};
            _decay_branchings[321]  = {0.0507178,0.6690563,0,0};
            _decay_branchings[-321] = {0,0,0.0507178,0.6690563};
            _decay_branchings[310]  = {0.0003501,0.0002345,0.0003501,0.0002345};
            _decay_branchings[130]  = {0.2027688,0.1352191,0.2027688,0.1352191};
            _decay_branchings[3122] = {0,0,0.0008322,0.0001570};
            _decay_branchings[-3122]= {0.0008322,0.0001570,0,0};
            _decay_branchings[3222] = {0.0000200,0,0,0};
            _decay_branchings[-3222]= {0,0,0.0000200,0};
            _decay_branchings[3112] = {0.0010170,0.0004500,0,0};
            _decay_branchings[-3112]= {0,0,0.0010170,0.0004500};
            _decay_branchings[3322] = {0.0002530,0.0000046,0,0};
            _decay_branchings[-3322]= {0,0,0.0002530,0.0000046};
            _decay_branchings[3312] = {0,0,0.0005630,0.0003500};
            _decay_branchings[-3312]= {0.0005630,0.0003500,0,0};

            // Decay sampling cdf {ve, vm, vebar, vmbar}
            _decay_cdf[211]  = {0.1,1,1,1};
            _decay_cdf[-211] = {0,0,0.1,1};
            _decay_cdf[321]  = {0.5,1,1,1};
            _decay_cdf[-321] = {0,0,0.5,1};
            _decay_cdf[310]  = {0.25,0.50,0.75,1};
            _decay_cdf[130]  = {0.25,0.50,0.75,1};
            _decay_cdf[3122] = {0,0,0.9,1};
            _decay_cdf[-3122]= {0.9,1,1,1};
            _decay_cdf[3222] = {1,1,1,1};
            _decay_cdf[-3222]= {0,0,1,1};
            _decay_cdf[3112] = {0.5,1,1,1};
            _decay_cdf[-3112]= {0,0,0.5,1};
            _decay_cdf[3322] = {0.5,1,1,1};
            _decay_cdf[-3322]= {0,0,0.5,1};
            _decay_cdf[3312] = {0,0,0.5,1};
            _decay_cdf[-3312]= {0.5,1,1,1};
            
            // construct decay pdf from cdf
            for ( const auto &element : _decay_cdf ){
                float pid = element.first;
                vector<float> cdf = element.second;
                cdf.insert(cdf.begin(),0);
                for (int ii=1;ii<cdf.size();ii++) _decay_pdf[pid].push_back(cdf[ii]-cdf[ii-1]);
            }
        }
        
        void analyze(const Event& event) {
            
            // Get all hadrons of interest
            const UnstableParticles &up = apply<UnstableParticles> (event, "UP");
            Particles hadrons = up.particles(Cuts::abspid==310 or Cuts::abspid==130 or Cuts::abspid==211 or Cuts::abspid==321 or  Cuts::abspid==3122 or Cuts::abspid==3112 or Cuts::abspid==3222 or Cuts::abspid==3322 or Cuts::abspid==3312);
            
            // loop through hadrons in event
            for (const Particle& hadron : hadrons) {
                
                // get hadron pid, position and momentum
                int hpid = hadron.pid();
                Vector3 x = hadron.origin().vector3()/meter + Vector3(_xorigin_h,_xorigin_v,0);
                Vector3 p = hadron.momentum().vector3()/GeV;
                
                // rotate with beam crossing angle
                if (_xing_urad_v != 0){
                    float angle = _xing_urad_v/1000./1000. ;
                    p = Vector3(p.x(), p.y()*cos(angle)+p.z()*sin(angle), p.z()*cos(angle)-p.y()*sin(angle));
                    x = Vector3(x.x(), x.y()*cos(angle)+x.z()*sin(angle), x.z()*cos(angle)-x.y()*sin(angle));
                }
                if (_xing_urad_h != 0){
                    float angle = _xing_urad_h/1000./1000. ;
                    p = Vector3(p.x()*cos(angle)+p.z()*sin(angle), p.y(), p.z()*cos(angle)-p.x()*sin(angle));
                    x = Vector3(x.x()*cos(angle)+x.z()*sin(angle), x.y(), x.z()*cos(angle)-x.x()*sin(angle));
                }

                // reject hadrons produced outside of pipe or moving backwards
                if (!inpipe(x)) continue;
                if (p.z() < 0 ) continue;
                
                // reject displaced hadrons from charged parent hadron decay for z>22m
                if (x.z()>22 and hadron.parents()[0].isCharged()) continue;
                
                // process particle
                process_particle(x, p, hpid, hadron.charge());
            }
        }
        
        void finalize() {
            
            _outfile.close();
            
            scale(_h_dSigma_F_dE_p12, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_F_dE_m12, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_F_dE_p14, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_F_dE_m14, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_F_dE_p16, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_F_dE_m16, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_F_dE_all, crossSection()/picobarn/sumOfWeights());
            
            scale(_h_dSigma_S_dE_p12, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_S_dE_m12, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_S_dE_p14, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_S_dE_m14, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_S_dE_p16, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_S_dE_m16, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_S_dE_all, crossSection()/picobarn/sumOfWeights());
            
            scale(_h_dSigma_deta_p12, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_deta_m12, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_deta_p14, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_deta_m14, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_deta_p16, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_deta_m16, crossSection()/picobarn/sumOfWeights());
            scale(_h_dSigma_deta_all, crossSection()/picobarn/sumOfWeights());
            
        }
        
        //*****************************************************************
        // Functyion related to geometry and propagation
        
        // function that interpolates arrays with constant function (used for geometry)
        double interpolation(vector< vector<float> > data, float x){
            int icount=0;
            while (data[0][icount]<=x) icount++;
            return data[1][icount-1];
        }
     
        // function that interpolates arrays with constant function (used for cross section)
        double linear_interpolation(vector< vector<float> > data, float x){
            int icount = 0;
            while (data[0][icount]<=x) icount++;
            return data[1][icount-1] + (x-data[0][icount-1])/(data[0][icount]-data[0][icount-1]) * (data[1][icount]-data[1][icount-1]);
        }
        
        // function that returns distance to next change in magnetic fields
        double dist_to_boundary(float z){
            int i1=0;
            while(_bfield[0][i1]<z) i1++;
            int i2=0;
            while(_bprime[0][i2]<z) i2++;
            int i3=0;
            while(_kickers[0][i3]<z) i3++;
            return min({_bfield[0][i1],_bprime[0][i2],_kickers[0][i3]})-z;
        }
        
        // function that evaluates offset as function of the location
        double get_offset(float z){
            if (z < 139.3) return 0;
            if (z > 158) return 0.097;
            return (z-75.)* 0.097 / (158.-75.);
        }
        
        // function that checks if particle is inside beam pipe
        bool inpipe(Vector3 x){
            if (isnan(x.z()) or isnan(x.z()) or isnan(x.z())) return false;
            if (x.z()<-0.1 or x.z()>_lmax) return false;
            float offset = get_offset(x.z());
            if (abs(abs(x.x())-offset)>interpolation(_aper1,x.z())) return false;
            if (abs(x.y())>interpolation(_aper2,x.z())) return false;
            if (pow((abs(x.x())-offset)/interpolation(_aper3,x.z()),2)+pow(x.y()/interpolation(_aper4,x.z()),2)>1) return false;
            return true;
        }
        
        // function that performs a numerical integration step for trajectory
        vector<Vector3> integration_step(Vector3 x, Vector3 p, float charge, float length, float bfield=0, float bprime=0){
            
            float zstart = x.z();
            
            // warning if B and B' are both != 0
            if (abs(bprime)>0 and abs(bfield)>0){
                cout << "Warning: bprime and bfield are non-zero: B="<<bfield<<" and B'="<<bprime <<" at z=" <<x.z()<< endl;
            }
                
            // drift tube
            if (bfield<_epsilon and bprime<_epsilon){
                x = x + p.unit() * length;
            }
            
            // dipole magnets
            if (abs(bfield)>0 and bprime<_epsilon){
                float rho   = sqrt(p.x()*p.x()+p.z()*p.z()) / bfield;
                float theta = length / rho;
                Vector3 punit = p.unit();
                Vector3 funit = (punit.cross( Vector3(0,1,0))).unit();
                x = x + rho * ( sin(theta) * punit + (1.-cos(theta)) * funit );
                p = p.mod() * cos(theta) * punit + p.mod() * sin(theta) * funit;
            }
            
            // quadrupole magnets
            if (abs(bprime)>0 and bfield<_epsilon){
                float kappa = 0.299 * bprime / p.mod();
                float rk = sqrt(abs(kappa));
                float rkh = length*rk;
                
                float offset = get_offset(x.z());
                if (offset > 0 and x.x()<0) offset =-offset;
                float x0 = x.x()-offset;
                float y0 = x.y();
                
                float xx,px,xy,py;
                Vector3 punit = p.unit();
                if (kappa>0){
                    xx =  x0*cos(rkh)     + punit.x()*sin(rkh)/rk ;
                    px = -x0*sin(rkh)*rk  + punit.x()*cos(rkh)    ;
                    xy =  y0*cosh(rkh)    + punit.y()*sinh(rkh)/rk;
                    py =  y0*sinh(rkh)*rk + punit.y()*cosh(rkh)   ;
                }
                else {
                    xx =  x0*cosh(rkh)    + punit.x()*sinh(rkh)/rk;
                    px =  x0*sinh(rkh)*rk + punit.x()*cosh(rkh)   ;
                    xy =  y0*cos(rkh)     + punit.y()*sin(rkh)/rk ;
                    py = -y0*sin(rkh)*rk  + punit.y()*cos(rkh)    ;
                }
                float pz = sqrt(1.-px*px-py*py);
                float xz = x.z() + length;
                x=Vector3(xx+offset,xy,xz);
                p=p.mod()*Vector3(px,py,pz);
            }

            // kickers
            if (abs(charge)>_epsilon){
                for (int i=0; i<_kickers[0].size(); i++){
                    float zkick = _kickers[0][i];
                    float hkick = _kickers[1][i];
                    float vkick = _kickers[2][i];
                    if (zstart<zkick and x.z()>=zkick){
                        float px, py;
                        px = p.x() + _pnominal * hkick * charge;
                        py = p.y() + _pnominal * vkick * charge;
                        p = Vector3(px,py,p.z());
                    }
                }
            }
            
            
            vector<Vector3> output = {x,p};
            return output;
        }
        
        // function that obtains particle trajectory in beam pipe
        vector<vector<Vector3> > get_trajetctory(Vector3 x, Vector3 p, float charge, float stepsize){
            
            float fieldfactor=4.;
            vector<Vector3> array_x, array_p, array_s;
            float length=stepsize;
            
            while (inpipe(x)){
                // get fields
                float bfield = interpolation(_bfield,x.z());
                float bprime = interpolation(_bprime,x.z());
                // optimize stepsize
                if (charge!=0){
                    if (abs(bfield)>0 or abs(bprime)>0) length=stepsize/fieldfactor ;
                    else length=stepsize;
                    float distance_to_boundary=dist_to_boundary(x.z());
                    if (distance_to_boundary<length) length=distance_to_boundary+0.001;
                }
                // record position
                array_x.push_back(x);
                array_p.push_back(p);
                array_s.push_back(Vector3(0,0,length));
                // integration step
                vector<Vector3> step = integration_step(x, p, charge, length, bfield*charge, bprime*charge);
                x=step[0];
                p=step[1];
                
            }
            
            vector<vector<Vector3> > output = {array_x, array_p, array_s};
            return output;
        }
        
        //*****************************************************************
        // Functions related to hadron decays
        
        // use CDF to sample neutrino energy in hadron rest frame
        float neutrino_energy(int hpid, int vpid){
            float cdfval = float(rand())/float((RAND_MAX));
            int icdf = 0;
            while (_energy_cdf[abs(hpid)][abs(vpid)][1][icdf] < cdfval) icdf++;
            return _energy_cdf[abs(hpid)][abs(vpid)][0][icdf];
        }
        
        // decay a hadron into neutrinos
        void decay_particle(int hpid, Vector3 x, Vector3 p, float wdecay){
            
            //create hadron momentum
            FourMomentum phadron;
            phadron.setXYZM(p.x(),p.y(),p.z(),_mass[abs(hpid)]);
            
            //get decay channel
            float cdfval = float(rand())/float((RAND_MAX));
            int ivpid = 0;
            while (_decay_cdf[hpid][ivpid] < cdfval) ivpid++;
            int vpid = _vpids[ivpid];
            float wbranching = _decay_branchings[hpid][ivpid]/_decay_pdf[hpid][ivpid];

            //get neutrino in hadron rest frame
            float phi = float(rand())/float((RAND_MAX)) * 2. * 3.1415926;
            float costh = 0.9999999 * ( float(rand())/float((RAND_MAX)) * 2. - 1. );
            float enu = neutrino_energy(hpid,vpid);
            FourMomentum vrest;
            vrest.setThetaPhiME(acos(costh), phi, 0, enu);
            
            // boost neutrino in lab frame
            LorentzTransform ltf;
            ltf.setBetaVec( phadron.betaVec() );
            FourMomentum pneutrino = ltf.transform(vrest);

            // save neutrino
            if (pneutrino.z()>0 and pneutrino.E()>10) {
                save_neutrino(hpid, vpid, x, pneutrino, wdecay*wbranching);
            }
        }
        
        // add neutrino to histogram
        void save_neutrino(int hpid, int vpid, Vector3 x, FourMomentum p, float weight){
            
            if (isnan(weight)) _outfile << "weight: "  <<  x.z() << " " << weight<< endl;
            
            // get position at FASER interface plane at L=480m
            Vector3 position = x + p.vector3()/p.vector3().z() * (480.-x.z());
            double posx = position.x();
            double posy = position.y();
            double eta480 = - log( tan( sqrt(posx*posx+posy*posy)/480./2. ));
            if (isnan(eta480)) eta480=0;
            bool passF = (posx>_dimF[0] and posx<_dimF[1] and posy>_dimF[2] and posy<_dimF[3]);
            bool passS = (posx>_dimS[0] and posx<_dimS[1] and posy>_dimS[2] and posy<_dimS[3]);
        
            // fill in histograms
            if (vpid==12){
                if (passF) _h_dSigma_F_dE_p12->fill(p.E()/GeV,weight);
                if (passS) _h_dSigma_S_dE_p12->fill(p.E()/GeV,weight);
                _h_dSigma_deta_p12->fill(eta480,weight);
            }
            if (vpid==14){
                if (passF) _h_dSigma_F_dE_p14->fill(p.E()/GeV,weight);
                if (passS) _h_dSigma_S_dE_p14->fill(p.E()/GeV,weight);
                _h_dSigma_deta_p14->fill(eta480,weight);
            }
            if (vpid==16){
                if (passF) _h_dSigma_F_dE_p16->fill(p.E()/GeV,weight);
                if (passS) _h_dSigma_S_dE_p16->fill(p.E()/GeV,weight);
                _h_dSigma_deta_p16->fill(eta480,weight);
            }
            if (vpid==-12){
                if (passF) _h_dSigma_F_dE_m12->fill(p.E()/GeV,weight);
                if (passS) _h_dSigma_S_dE_m12->fill(p.E()/GeV,weight);
                _h_dSigma_deta_m12->fill(eta480,weight);
            }
            if (vpid==-14){
                if (passF) _h_dSigma_F_dE_m14->fill(p.E()/GeV,weight);
                if (passS) _h_dSigma_S_dE_m14->fill(p.E()/GeV,weight);
                _h_dSigma_deta_m14->fill(eta480,weight);
            }
            if (vpid==-16){
                if (passF) _h_dSigma_F_dE_m16->fill(p.E()/GeV,weight);
                if (passS) _h_dSigma_S_dE_m16->fill(p.E()/GeV,weight);
                _h_dSigma_deta_m16->fill(eta480,weight);
            }
            if (true){
                if (passF) _h_dSigma_F_dE_all->fill(p.E()/GeV,weight);
                if (passS) _h_dSigma_S_dE_all->fill(p.E()/GeV,weight);
                _h_dSigma_deta_all->fill(eta480,weight);
            }
        }
        
        // function that obtains trajetctory and decays for each particle
        void process_particle(Vector3 x0, Vector3 p0, int hpid, float charge){
            
            // get decay length
            float decaylength = _ctau[abs(hpid)] * p0.mod() / _mass[abs(hpid)];
            
            // get trajectory
            float stepsize = 1;
            vector<vector<Vector3> > trajectory = get_trajetctory(x0, p0, charge, stepsize);
            
            // loop over trejectory and decay hadron
            for (int itraj=0;itraj<trajectory[0].size();itraj++){
                Vector3 x = trajectory[0][itraj];
                Vector3 p = trajectory[1][itraj];
                float s = trajectory[2][itraj].z();
                float wdecay = exp(-(x.z()-x0.z()) / decaylength) * (1. - exp(- s / decaylength) ) ;
                decay_particle(hpid, x, p, wdecay);
            }
        }
        
        private:
        
        Histo1DPtr _h_dSigma_F_dE_p14, _h_dSigma_F_dE_m14, _h_dSigma_F_dE_p12, _h_dSigma_F_dE_m12, _h_dSigma_F_dE_p16, _h_dSigma_F_dE_m16, _h_dSigma_F_dE_all,
        _h_dSigma_S_dE_p14, _h_dSigma_S_dE_m14, _h_dSigma_S_dE_p12, _h_dSigma_S_dE_m12, _h_dSigma_S_dE_p16, _h_dSigma_S_dE_m16, _h_dSigma_S_dE_all,
        _h_dSigma_deta_p14, _h_dSigma_deta_m14, _h_dSigma_deta_p12, _h_dSigma_deta_m12, _h_dSigma_deta_p16, _h_dSigma_deta_m16, _h_dSigma_deta_all;
        
        float _lmax = 220;
        float _pnominal = 6500;
        //crossing angle
        static constexpr float _xing_urad_h = 0;
        static constexpr float _xing_urad_v = 150;
        static constexpr float _xorigin_h = -0.00055;
        static constexpr float _xorigin_v = 0;
        //xmin, xmax, ymin, ymax - FASER / SND 
        vector<float> _dimF = {-0.125, 0.125,-0.125, 0.125};
        vector<float> _dimS = { 0.080, 0.470, 0.155, 0.545};
        
        float _epsilon = 0.000000000001;
        vector<int> _vpids = {12, 14, -12, -14};
        map<int, float> _mass;
        map<int, float> _ctau;
        vector< vector<float> >  _aper1, _aper2, _aper3, _aper4, _bfield, _bprime, _kickers;
        map<int, map<int, vector< vector<float> > > > _energy_cdf;
        map<int, vector<float> > _decay_branchings;
        map<int, vector<float> > _decay_cdf, _decay_pdf;
        std::ofstream _outfile;
        
    };
    
    DECLARE_RIVET_PLUGIN(Neutrinos_Light);
    
}

